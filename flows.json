[
    {
        "id": "f87284aad6864f17",
        "type": "tab",
        "label": "Water Vaporizer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c006e20c144742db",
        "type": "tab",
        "label": "SoilMoisture",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a9d611e430e24fc7",
        "type": "tab",
        "label": "AnimalsHealth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1f6ef931d2586798",
        "type": "tab",
        "label": "AnimalCoords",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "21cfc9c1db49869b",
        "type": "tab",
        "label": "MQTTReceivers",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "457e8c05c9785e19",
        "type": "subflow",
        "name": "TCPQuery",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "567535ad8f06710e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "f007f34a541c8fde",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f97095c1612c0231",
        "type": "subflow",
        "name": "TCPSetSensor",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "c768ec7fbd313602"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 80,
                "wires": [
                    {
                        "id": "55c33452fc63bdcc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9c8cae6fa9a5c013",
        "type": "subflow",
        "name": "TCPQueryFloat",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "30f54ecbf66d8a4a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 100,
                "wires": [
                    {
                        "id": "608242b46dc0c080",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "56bd97b68c9dd11f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "46945841e756c922",
        "type": "mongodb4-client",
        "name": "",
        "protocol": "mongodb",
        "hostname": "",
        "port": "",
        "dbName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsInsecure": false,
        "uri": "",
        "advanced": "",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "37e20789b639f60a",
        "type": "mongodb4-client",
        "name": "",
        "protocol": "mongodb",
        "hostname": "localhost",
        "port": "27017",
        "dbName": "Rainforest",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsInsecure": false,
        "uri": "",
        "advanced": "",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "8f769c4a72a33cfe",
        "type": "ui_group",
        "name": "Environment",
        "tab": "0df9d6acb0e6adfe",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0df9d6acb0e6adfe",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "dfb2ee6877025329",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "27d22955fd10c06e",
        "type": "ui_group",
        "name": "Animals",
        "tab": "0df9d6acb0e6adfe",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "567535ad8f06710e",
        "type": "function",
        "z": "457e8c05c9785e19",
        "name": "SetPayload",
        "func": "msg.payload = \"GET \" + msg.queryId;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "f8243da112da3bb3"
            ]
        ]
    },
    {
        "id": "f8243da112da3bb3",
        "type": "tcp request",
        "z": "457e8c05c9785e19",
        "name": "GETRequest",
        "server": "127.0.0.1",
        "port": "9000",
        "out": "char",
        "ret": "string",
        "splitc": "\\n",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 430,
        "y": 80,
        "wires": [
            [
                "f007f34a541c8fde"
            ]
        ]
    },
    {
        "id": "f007f34a541c8fde",
        "type": "function",
        "z": "457e8c05c9785e19",
        "name": "FormatPayload",
        "func": "msg.payload = msg.payload.replace(/\\n/g, '');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c768ec7fbd313602",
        "type": "function",
        "z": "f97095c1612c0231",
        "name": "SetPayload",
        "func": "msg.payload = \"SET \" + msg.sensorId + \" \" + msg.value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "55c33452fc63bdcc"
            ]
        ]
    },
    {
        "id": "55c33452fc63bdcc",
        "type": "tcp request",
        "z": "f97095c1612c0231",
        "name": "GETRequest",
        "server": "127.0.0.1",
        "port": "9000",
        "out": "char",
        "ret": "string",
        "splitc": "\\n",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 430,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "30f54ecbf66d8a4a",
        "type": "function",
        "z": "9c8cae6fa9a5c013",
        "name": "SetPayload",
        "func": "msg.payload = \"GET \" + msg.queryId;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 100,
        "wires": [
            [
                "410bb7d8789d8bf3"
            ]
        ]
    },
    {
        "id": "410bb7d8789d8bf3",
        "type": "tcp request",
        "z": "9c8cae6fa9a5c013",
        "name": "GETRequest",
        "server": "127.0.0.1",
        "port": "9000",
        "out": "char",
        "ret": "string",
        "splitc": "\\n",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 430,
        "y": 100,
        "wires": [
            [
                "608242b46dc0c080"
            ]
        ]
    },
    {
        "id": "608242b46dc0c080",
        "type": "function",
        "z": "9c8cae6fa9a5c013",
        "name": "FormatPayload",
        "func": "let response = msg.payload.replace(/\\n/g, '');\nlet value = parseInt(response);\n\n//handle errors\nif(isNaN(value)){\n    msg.payload = response;\n    return msg;\n}\n\nmsg.payload = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "628d5afdfd6472db",
        "type": "inject",
        "z": "f87284aad6864f17",
        "name": "UserPresence",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "8ed9c5038eed2cca"
            ]
        ]
    },
    {
        "id": "8ed9c5038eed2cca",
        "type": "function",
        "z": "f87284aad6864f17",
        "name": "SetSensor",
        "func": "msg.queryId = \"1\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "5ca543219e79cd3c"
            ]
        ]
    },
    {
        "id": "5ca543219e79cd3c",
        "type": "subflow:457e8c05c9785e19",
        "z": "f87284aad6864f17",
        "name": "",
        "x": 560,
        "y": 80,
        "wires": [
            [
                "c8de6d5dd8a72729"
            ]
        ]
    },
    {
        "id": "c8de6d5dd8a72729",
        "type": "switch",
        "z": "f87284aad6864f17",
        "name": "Error",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ERRORS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 200,
        "wires": [
            [
                "08bc191f93fdf378"
            ],
            [
                "ced4aee0a8898a1c",
                "3c1eb5a31d646a2d"
            ]
        ]
    },
    {
        "id": "08bc191f93fdf378",
        "type": "encrypt",
        "z": "f87284aad6864f17",
        "name": "EncryptError",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 180,
        "wires": [
            [
                "82893011f739747d"
            ]
        ]
    },
    {
        "id": "82893011f739747d",
        "type": "mqtt out",
        "z": "f87284aad6864f17",
        "name": "",
        "topic": "errors/userPresence",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 820,
        "y": 180,
        "wires": []
    },
    {
        "id": "f7b8a704afa14018",
        "type": "subflow:f97095c1612c0231",
        "z": "f87284aad6864f17",
        "name": "",
        "x": 580,
        "y": 340,
        "wires": [
            [
                "970ee06a6ac40e27"
            ]
        ]
    },
    {
        "id": "ced4aee0a8898a1c",
        "type": "function",
        "z": "f87284aad6864f17",
        "name": "SetVaporizer",
        "func": "msg.sensorId = \"2\";\nmsg.value = msg.payload == \"True\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 340,
        "wires": [
            [
                "f7b8a704afa14018"
            ]
        ]
    },
    {
        "id": "970ee06a6ac40e27",
        "type": "debug",
        "z": "f87284aad6864f17",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 340,
        "wires": []
    },
    {
        "id": "3c1eb5a31d646a2d",
        "type": "encrypt",
        "z": "f87284aad6864f17",
        "name": "EncryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "932e926f87f6d516"
            ]
        ]
    },
    {
        "id": "932e926f87f6d516",
        "type": "mqtt out",
        "z": "f87284aad6864f17",
        "name": "",
        "topic": "env/userPresence",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 810,
        "y": 280,
        "wires": []
    },
    {
        "id": "7735c0c9dcc99bc4",
        "type": "inject",
        "z": "f87284aad6864f17",
        "name": "Humidity",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "5e3036bf0f42d891"
            ]
        ]
    },
    {
        "id": "5e3036bf0f42d891",
        "type": "function",
        "z": "f87284aad6864f17",
        "name": "SetSensor",
        "func": "msg.queryId = \"6\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 520,
        "wires": [
            [
                "8831c0c396a9417f"
            ]
        ]
    },
    {
        "id": "bc33515d732bda87",
        "type": "switch",
        "z": "f87284aad6864f17",
        "name": "Error",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ERRORS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 640,
        "wires": [
            [
                "e63fc3c95245215c"
            ],
            [
                "d23e19516be56223",
                "c29321e471b2baaf",
                "bb419f075e6fdba3"
            ]
        ]
    },
    {
        "id": "e63fc3c95245215c",
        "type": "encrypt",
        "z": "f87284aad6864f17",
        "name": "EncryptError",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 620,
        "wires": [
            [
                "bf280e1f037548ab"
            ]
        ]
    },
    {
        "id": "bf280e1f037548ab",
        "type": "mqtt out",
        "z": "f87284aad6864f17",
        "name": "",
        "topic": "errors/humidty",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 800,
        "y": 620,
        "wires": []
    },
    {
        "id": "47cf60064a3a26be",
        "type": "subflow:f97095c1612c0231",
        "z": "f87284aad6864f17",
        "name": "",
        "x": 580,
        "y": 780,
        "wires": [
            [
                "dd123c9b8b411df3"
            ]
        ]
    },
    {
        "id": "d23e19516be56223",
        "type": "function",
        "z": "f87284aad6864f17",
        "name": "SetVaporizer",
        "func": "msg.sensorId = \"2\";\nmsg.value = msg.payload < 77;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 780,
        "wires": [
            [
                "47cf60064a3a26be"
            ]
        ]
    },
    {
        "id": "dd123c9b8b411df3",
        "type": "debug",
        "z": "f87284aad6864f17",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 780,
        "wires": []
    },
    {
        "id": "c29321e471b2baaf",
        "type": "encrypt",
        "z": "f87284aad6864f17",
        "name": "EncryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 720,
        "wires": [
            [
                "89ef442dd4f8ec9f"
            ]
        ]
    },
    {
        "id": "89ef442dd4f8ec9f",
        "type": "mqtt out",
        "z": "f87284aad6864f17",
        "name": "",
        "topic": "env/humidity",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 790,
        "y": 720,
        "wires": []
    },
    {
        "id": "fc79cd2a7104645a",
        "type": "subflow:f97095c1612c0231",
        "z": "f87284aad6864f17",
        "name": "",
        "x": 580,
        "y": 840,
        "wires": [
            [
                "b97748ea16665662"
            ]
        ]
    },
    {
        "id": "bb419f075e6fdba3",
        "type": "function",
        "z": "f87284aad6864f17",
        "name": "SetAlarm",
        "func": "msg.sensorId = \"14\";\nmsg.value = msg.payload < 77 || msg.payload > 88;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 840,
        "wires": [
            [
                "fc79cd2a7104645a"
            ]
        ]
    },
    {
        "id": "b97748ea16665662",
        "type": "debug",
        "z": "f87284aad6864f17",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 840,
        "wires": []
    },
    {
        "id": "8831c0c396a9417f",
        "type": "subflow:457e8c05c9785e19",
        "z": "f87284aad6864f17",
        "name": "",
        "x": 560,
        "y": 520,
        "wires": [
            [
                "bc33515d732bda87"
            ]
        ]
    },
    {
        "id": "534be8a0a43726c4",
        "type": "inject",
        "z": "c006e20c144742db",
        "name": "SoilMoisture",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "92f808e210578dc8"
            ]
        ]
    },
    {
        "id": "92f808e210578dc8",
        "type": "function",
        "z": "c006e20c144742db",
        "name": "SetSensor",
        "func": "msg.queryId = \"7\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "ef6b878e7733483e"
            ]
        ]
    },
    {
        "id": "2b0f5ba124bad7ad",
        "type": "switch",
        "z": "c006e20c144742db",
        "name": "Error",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ERRORS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 200,
        "wires": [
            [
                "652b2b8f1f1bb46e"
            ],
            [
                "8a6c0d5f2c894437",
                "13ae57bde0d8c638",
                "bf41d2602d6ed9b0"
            ]
        ]
    },
    {
        "id": "652b2b8f1f1bb46e",
        "type": "encrypt",
        "z": "c006e20c144742db",
        "name": "EncryptError",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 180,
        "wires": [
            [
                "699a25bf5faeb0d6"
            ]
        ]
    },
    {
        "id": "699a25bf5faeb0d6",
        "type": "mqtt out",
        "z": "c006e20c144742db",
        "name": "",
        "topic": "errors/soilMoisture",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 810,
        "y": 180,
        "wires": []
    },
    {
        "id": "03c2efce4d82ab2e",
        "type": "subflow:f97095c1612c0231",
        "z": "c006e20c144742db",
        "name": "",
        "x": 580,
        "y": 340,
        "wires": [
            [
                "7ce2e767e33002bf"
            ]
        ]
    },
    {
        "id": "8a6c0d5f2c894437",
        "type": "function",
        "z": "c006e20c144742db",
        "name": "SetIrrigators",
        "func": "msg.sensorId = \"2\";\nmsg.value = msg.payload < 77;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 340,
        "wires": [
            [
                "03c2efce4d82ab2e"
            ]
        ]
    },
    {
        "id": "7ce2e767e33002bf",
        "type": "debug",
        "z": "c006e20c144742db",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 340,
        "wires": []
    },
    {
        "id": "13ae57bde0d8c638",
        "type": "encrypt",
        "z": "c006e20c144742db",
        "name": "EncryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "9db6f7c61aa09867"
            ]
        ]
    },
    {
        "id": "9db6f7c61aa09867",
        "type": "mqtt out",
        "z": "c006e20c144742db",
        "name": "",
        "topic": "env/soilMoisture",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 800,
        "y": 280,
        "wires": []
    },
    {
        "id": "be16333ba3e9e1ad",
        "type": "subflow:f97095c1612c0231",
        "z": "c006e20c144742db",
        "name": "",
        "x": 580,
        "y": 400,
        "wires": [
            [
                "063b1c368e935b02"
            ]
        ]
    },
    {
        "id": "bf41d2602d6ed9b0",
        "type": "function",
        "z": "c006e20c144742db",
        "name": "SetAlarm",
        "func": "msg.sensorId = \"15\";\nmsg.value = msg.payload < 77 || msg.payload > 88;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 400,
        "wires": [
            [
                "be16333ba3e9e1ad"
            ]
        ]
    },
    {
        "id": "063b1c368e935b02",
        "type": "debug",
        "z": "c006e20c144742db",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 400,
        "wires": []
    },
    {
        "id": "fb9bb2095b62980c",
        "type": "debug",
        "z": "c006e20c144742db",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 80,
        "wires": []
    },
    {
        "id": "ef6b878e7733483e",
        "type": "subflow:457e8c05c9785e19",
        "z": "c006e20c144742db",
        "name": "",
        "x": 560,
        "y": 80,
        "wires": [
            [
                "fb9bb2095b62980c",
                "2b0f5ba124bad7ad"
            ]
        ]
    },
    {
        "id": "f5ef54eea0985e4a",
        "type": "inject",
        "z": "a9d611e430e24fc7",
        "name": "HealthParams",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "9361d216d18a96ff"
            ]
        ]
    },
    {
        "id": "9361d216d18a96ff",
        "type": "loop",
        "z": "a9d611e430e24fc7",
        "name": "FixedLoop",
        "kind": "fcnt",
        "count": "3",
        "initial": "8",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "enum",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-orig",
        "finalPayload": "final-orig",
        "x": 470,
        "y": 80,
        "wires": [
            [],
            [
                "88fc28322ca1baac"
            ]
        ]
    },
    {
        "id": "88fc28322ca1baac",
        "type": "function",
        "z": "a9d611e430e24fc7",
        "name": "GetSensorIndex",
        "func": "msg.queryId = msg.loop.value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "0b2ce7c5f3f24878"
            ]
        ]
    },
    {
        "id": "0b2ce7c5f3f24878",
        "type": "subflow:457e8c05c9785e19",
        "z": "a9d611e430e24fc7",
        "name": "",
        "x": 560,
        "y": 160,
        "wires": [
            [
                "b136756367a00c14",
                "9361d216d18a96ff"
            ]
        ]
    },
    {
        "id": "b136756367a00c14",
        "type": "switch",
        "z": "a9d611e430e24fc7",
        "name": "Error",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ERRORS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 280,
        "wires": [
            [
                "3c3686432fcceeed"
            ],
            [
                "7a21a0bcf532c6b9",
                "ea786a5ca8de56a8",
                "e61fbdbd8dd94b89"
            ]
        ]
    },
    {
        "id": "3c3686432fcceeed",
        "type": "encrypt",
        "z": "a9d611e430e24fc7",
        "name": "EncryptError",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 350,
        "y": 260,
        "wires": [
            [
                "0b53e119510632dc"
            ]
        ]
    },
    {
        "id": "0b53e119510632dc",
        "type": "mqtt out",
        "z": "a9d611e430e24fc7",
        "name": "",
        "topic": "errors/health",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 790,
        "y": 260,
        "wires": []
    },
    {
        "id": "7a21a0bcf532c6b9",
        "type": "function",
        "z": "a9d611e430e24fc7",
        "name": "SetHrAlarm",
        "func": "let healthObj = JSON.parse(msg.payload);\nlet hr = healthObj.hb;\n\nmsg.sensorId = msg.queryId + 8;\nmsg.value = hr < 285 || hr > 305;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 420,
        "wires": [
            [
                "59729989401f7acf"
            ]
        ]
    },
    {
        "id": "59729989401f7acf",
        "type": "subflow:f97095c1612c0231",
        "z": "a9d611e430e24fc7",
        "name": "",
        "x": 580,
        "y": 420,
        "wires": [
            [
                "c6ef15cdb22919e1"
            ]
        ]
    },
    {
        "id": "c6ef15cdb22919e1",
        "type": "debug",
        "z": "a9d611e430e24fc7",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 420,
        "wires": []
    },
    {
        "id": "ea786a5ca8de56a8",
        "type": "function",
        "z": "a9d611e430e24fc7",
        "name": "SetTempAlarm",
        "func": "let healthObj = JSON.parse(msg.payload);\nlet bodyTem = healthObj.body_tem;\n\nmsg.sensorId = msg.queryId + 3 + 8;\nmsg.value = bodyTem < 39 || bodyTem > 43;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            [
                "291e0958b09c8928"
            ]
        ]
    },
    {
        "id": "291e0958b09c8928",
        "type": "subflow:f97095c1612c0231",
        "z": "a9d611e430e24fc7",
        "name": "",
        "x": 580,
        "y": 480,
        "wires": [
            [
                "6b51107fd23a352b"
            ]
        ]
    },
    {
        "id": "6b51107fd23a352b",
        "type": "debug",
        "z": "a9d611e430e24fc7",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 480,
        "wires": []
    },
    {
        "id": "e61fbdbd8dd94b89",
        "type": "encrypt",
        "z": "a9d611e430e24fc7",
        "name": "EncryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "6ee84572258c7d56"
            ]
        ]
    },
    {
        "id": "6ee84572258c7d56",
        "type": "mqtt out",
        "z": "a9d611e430e24fc7",
        "name": "",
        "topic": "birds/health",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 790,
        "y": 360,
        "wires": []
    },
    {
        "id": "9efea2155ff54c04",
        "type": "inject",
        "z": "1f6ef931d2586798",
        "name": "AnimalCoords",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "308567613d6b936f"
            ]
        ]
    },
    {
        "id": "308567613d6b936f",
        "type": "loop",
        "z": "1f6ef931d2586798",
        "name": "FixedLoop",
        "kind": "fcnt",
        "count": "3",
        "initial": "11",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "enum",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-orig",
        "finalPayload": "final-orig",
        "x": 470,
        "y": 80,
        "wires": [
            [],
            [
                "cb2372a2101be6c6"
            ]
        ]
    },
    {
        "id": "cb2372a2101be6c6",
        "type": "function",
        "z": "1f6ef931d2586798",
        "name": "GetSensorIndex",
        "func": "msg.queryId = msg.loop.value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "d3348942a7777029"
            ]
        ]
    },
    {
        "id": "d3348942a7777029",
        "type": "subflow:457e8c05c9785e19",
        "z": "1f6ef931d2586798",
        "name": "",
        "x": 560,
        "y": 160,
        "wires": [
            [
                "0926f6a6ff0fb5b4",
                "308567613d6b936f"
            ]
        ]
    },
    {
        "id": "0926f6a6ff0fb5b4",
        "type": "switch",
        "z": "1f6ef931d2586798",
        "name": "Error",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ERRORS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 280,
        "wires": [
            [
                "c22146cae5df9e29"
            ],
            [
                "18aa9618f0c24438",
                "8491b830678a5e4e"
            ]
        ]
    },
    {
        "id": "c22146cae5df9e29",
        "type": "encrypt",
        "z": "1f6ef931d2586798",
        "name": "EncryptError",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 350,
        "y": 260,
        "wires": [
            [
                "755bc3b9007143f0"
            ]
        ]
    },
    {
        "id": "755bc3b9007143f0",
        "type": "mqtt out",
        "z": "1f6ef931d2586798",
        "name": "",
        "topic": "errors/coords",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 780,
        "y": 260,
        "wires": []
    },
    {
        "id": "18aa9618f0c24438",
        "type": "function",
        "z": "1f6ef931d2586798",
        "name": "SetGPSAlarm",
        "func": "let gpsObj = JSON.parse(msg.payload);\nlet lat = gpsObj.lat;\nlet lon = gpsObj.lon;\n\nmsg.prova = {\n    \"lat\": lat,\n    \"lon\": lon\n}\n\nmsg.sensorId = msg.queryId + 11;\nmsg.value = lat < 40 || lat > 50 || lon < 40 || lon > 50;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "57a36d3330bdef10"
            ]
        ]
    },
    {
        "id": "57a36d3330bdef10",
        "type": "subflow:f97095c1612c0231",
        "z": "1f6ef931d2586798",
        "name": "",
        "x": 580,
        "y": 420,
        "wires": [
            [
                "fba59e0a6cb8f02e"
            ]
        ]
    },
    {
        "id": "fba59e0a6cb8f02e",
        "type": "debug",
        "z": "1f6ef931d2586798",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 420,
        "wires": []
    },
    {
        "id": "8491b830678a5e4e",
        "type": "encrypt",
        "z": "1f6ef931d2586798",
        "name": "EncryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "f317655fdbda0f5c"
            ]
        ]
    },
    {
        "id": "f317655fdbda0f5c",
        "type": "mqtt out",
        "z": "1f6ef931d2586798",
        "name": "",
        "topic": "birds/coords",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "56bd97b68c9dd11f",
        "x": 770,
        "y": 360,
        "wires": []
    },
    {
        "id": "a80e86f72a11bd80",
        "type": "mqtt in",
        "z": "21cfc9c1db49869b",
        "name": "",
        "topic": "errors/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "56bd97b68c9dd11f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "b845b35cab2eab70"
            ]
        ]
    },
    {
        "id": "b845b35cab2eab70",
        "type": "decrypt",
        "z": "21cfc9c1db49869b",
        "name": "DecryptError",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 320,
        "wires": [
            [
                "9f9f3da8011e74ca"
            ]
        ]
    },
    {
        "id": "fc43e633298aedaa",
        "type": "mqtt in",
        "z": "21cfc9c1db49869b",
        "name": "",
        "topic": "env/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "56bd97b68c9dd11f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 140,
        "wires": [
            [
                "23a52473b7af779c"
            ]
        ]
    },
    {
        "id": "23a52473b7af779c",
        "type": "decrypt",
        "z": "21cfc9c1db49869b",
        "name": "DecryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 140,
        "wires": [
            [
                "899a31772a454267"
            ]
        ]
    },
    {
        "id": "e670b95a560d9685",
        "type": "mqtt in",
        "z": "21cfc9c1db49869b",
        "name": "",
        "topic": "birds/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "56bd97b68c9dd11f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 220,
        "wires": [
            [
                "d48a7a2bc41e45f2"
            ]
        ]
    },
    {
        "id": "d48a7a2bc41e45f2",
        "type": "decrypt",
        "z": "21cfc9c1db49869b",
        "name": "DecryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 220,
        "wires": [
            [
                "11c2c61eedde1a1d"
            ]
        ]
    },
    {
        "id": "ed430e224729a8b9",
        "type": "file",
        "z": "21cfc9c1db49869b",
        "name": "LogErrors",
        "filename": "errors_log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 780,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9f9f3da8011e74ca",
        "type": "function",
        "z": "21cfc9c1db49869b",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 320,
        "wires": [
            [
                "ed430e224729a8b9"
            ]
        ]
    },
    {
        "id": "11c2c61eedde1a1d",
        "type": "function",
        "z": "21cfc9c1db49869b",
        "name": "FormatValue",
        "func": "let obj = JSON.parse(msg.payload);\nobj.timestamp = Date.now();\n\nmsg.collection = msg.topic.replace('/', '.'); \nmsg.payload = [obj]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 220,
        "wires": [
            [
                "203499054ea13edd"
            ]
        ]
    },
    {
        "id": "203499054ea13edd",
        "type": "mongodb4",
        "z": "21cfc9c1db49869b",
        "clientNode": "37e20789b639f60a",
        "collection": "",
        "operation": "insert",
        "output": "toArray",
        "name": "RainforestDB",
        "x": 770,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "899a31772a454267",
        "type": "function",
        "z": "21cfc9c1db49869b",
        "name": "FormatValue",
        "func": "msg.collection = msg.topic.replace('/', '.');\nmsg.payload = [{\n    \"value\": msg.payload,\n    \"timestamp\": Date.now()\n}]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 140,
        "wires": [
            [
                "203499054ea13edd"
            ]
        ]
    },
    {
        "id": "96ad96c3f123d5a8",
        "type": "mqtt in",
        "z": "21cfc9c1db49869b",
        "name": "",
        "topic": "env/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "56bd97b68c9dd11f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 460,
        "wires": [
            [
                "2e0a2743fbaeaa56"
            ]
        ]
    },
    {
        "id": "2e0a2743fbaeaa56",
        "type": "decrypt",
        "z": "21cfc9c1db49869b",
        "name": "DecryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 460,
        "wires": [
            [
                "932bf07fe8563251"
            ]
        ]
    },
    {
        "id": "932bf07fe8563251",
        "type": "ui_gauge",
        "z": "21cfc9c1db49869b",
        "name": "Humidity",
        "group": "8f769c4a72a33cfe",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity",
        "label": "units",
        "format": "{{value}}",
        "min": "90",
        "max": "0",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "77",
        "seg2": "57",
        "className": "",
        "x": 780,
        "y": 460,
        "wires": []
    },
    {
        "id": "70dac23210c4447d",
        "type": "mqtt in",
        "z": "21cfc9c1db49869b",
        "name": "",
        "topic": "env/soilMoisture",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "56bd97b68c9dd11f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 540,
        "wires": [
            [
                "c76bc0c791eb5f95"
            ]
        ]
    },
    {
        "id": "c76bc0c791eb5f95",
        "type": "decrypt",
        "z": "21cfc9c1db49869b",
        "name": "DecryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 540,
        "wires": [
            [
                "862b3b949975e4a5"
            ]
        ]
    },
    {
        "id": "862b3b949975e4a5",
        "type": "ui_gauge",
        "z": "21cfc9c1db49869b",
        "name": "SoilMoisture",
        "group": "8f769c4a72a33cfe",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "SoilMoisture",
        "label": "units",
        "format": "{{value}}",
        "min": "90",
        "max": "0",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "77",
        "seg2": "57",
        "className": "",
        "x": 790,
        "y": 540,
        "wires": []
    },
    {
        "id": "81e87236b5cff86c",
        "type": "mqtt in",
        "z": "21cfc9c1db49869b",
        "name": "",
        "topic": "birds/health",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "56bd97b68c9dd11f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 640,
        "wires": [
            [
                "50edac2682814e07"
            ]
        ]
    },
    {
        "id": "50edac2682814e07",
        "type": "decrypt",
        "z": "21cfc9c1db49869b",
        "name": "DecryptValue",
        "algorithm": "AES",
        "key": "labiotrainforest",
        "x": 370,
        "y": 640,
        "wires": [
            [
                "5dfb5bbcc6e4c831",
                "374e06f29df73d4c"
            ]
        ]
    },
    {
        "id": "5dfb5bbcc6e4c831",
        "type": "function",
        "z": "21cfc9c1db49869b",
        "name": "FormatValue",
        "func": "let healthObj = JSON.parse(msg.payload);\n\nmsg.topic = healthObj.name;\nmsg.payload = healthObj.body_tem;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 660,
        "wires": [
            [
                "1848df98f1e257a1"
            ]
        ]
    },
    {
        "id": "374e06f29df73d4c",
        "type": "function",
        "z": "21cfc9c1db49869b",
        "name": "FormatValue",
        "func": "let healthObj = JSON.parse(msg.payload);\n\nmsg.topic = healthObj.name;\nmsg.payload = healthObj.hb;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 620,
        "wires": [
            [
                "4a82ce96f134a587"
            ]
        ]
    },
    {
        "id": "4a82ce96f134a587",
        "type": "ui_chart",
        "z": "21cfc9c1db49869b",
        "name": "HeartRate",
        "group": "27d22955fd10c06e",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "HeartRate",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "1848df98f1e257a1",
        "type": "ui_chart",
        "z": "21cfc9c1db49869b",
        "name": "BodyTemperature",
        "group": "27d22955fd10c06e",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "BodyTemperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 660,
        "wires": [
            []
        ]
    }
]